layouts:
  - path: cmd/main.go
    delims:
      - ""
      - ""
    body: |-
      // Code generated by hertz generator.

      package main

      import (
      	"fmt"
      	"{{.GoModule}}/conf"
      	"{{.GoModule}}/internal/dal"
      	"{{.GoModule}}/internal/middleware"
      	"{{.GoModule}}/internal/router"

      	"github.com/cloudwego/hertz/pkg/app/server"
      )

      func main() {
      	// init dal
      	// dal.Init()
      	port := conf.GetConf().Hertz.Port
      	h := server.New(server.WithHostPorts(fmt.Sprintf(":%d", port)))

      	// apply global middleware
      	middleware.Register(h)

        // register router
      	router.Register(h)

      	h.Spin()
      }


  - path: conf/conf.go
    delims:
      - ""
      - ""
    body: |-
      package conf

      import (
      	"fmt"
      	"os"
      	"path/filepath"
      	"sync"

      	"github.com/bytedance/go-tagexpr/v2/validator"
      	"gopkg.in/yaml.v2"

      	"github.com/cloudwego/hertz/pkg/common/hlog"
      )

      var (
      	conf *Config
      	once sync.Once
      )

      type Config struct {
      	Env string

      	Hertz Hertz `yaml:"hertz"`
        MySQL MySQL `yaml:"mysql"`
        Redis Redis `yaml:"redis"`
      }

      type MySQL struct {
      	Username string `yaml:"username"`
      	Password string `yaml:"password"`
      	Host     string `yaml:"host"`
      	Port     uint16 `yaml:"port"`
      	DB       string `yaml:"db"`
      }


      type Redis struct {
      	Host     string `yaml:"host"`
      	Port     string `yaml:"port"`
      	Password string `yaml:"password"`
      }

      type Hertz struct {
      	Port            uint16 `yaml:"port"`
      	EnablePprof     bool   `yaml:"enable_pprof"`
      	EnableGzip      bool   `yaml:"enable_gzip"`
      	EnableAccessLog bool   `yaml:"enable_access_log"`
      	LogLevel        string `yaml:"log_level"`
      	LogFileName     string `yaml:"log_file_name"`
      	LogMaxSize      int    `yaml:"log_max_size"`
      	LogMaxBackups   int    `yaml:"log_max_backups"`
      	LogMaxAge       int    `yaml:"log_max_age"`
      }

      // GetConf gets configuration instance
      func GetConf() *Config {
      	once.Do(initConf)
      	return conf
      }

      func initConf() {
      	prefix := "conf"
      	filename := "conf.yaml"
      	env := GetEnv()
      	if env != "" {
      		filename = fmt.Sprintf("conf.%s.yaml", env)
      	}

      	confFileRelPath := filepath.Join(prefix, filename)
      	if env == "test" {
      		confFileRelPath = filepath.Join("..", confFileRelPath)
      	}
      	content, err := os.ReadFile(confFileRelPath)
      	if err != nil {
      		panic(err)
      	}

      	conf = new(Config)
      	err = yaml.Unmarshal(content, conf)
      	if err != nil {
      		hlog.Error("parse yaml error - %v", err)
      		panic(err)
      	}
      	if err := validator.Validate(conf); err != nil {
      		hlog.Error("validate config error - %v", err)
      		panic(err)
      	}

      	conf.Env = GetEnv()

      	if conf.Hertz.Port == 0 {
      		conf.Hertz.Port = 3000
      	}
      }

      func GetEnv() string {
      	e := os.Getenv("GO_ENV")
      	if len(e) == 0 {
      		return "test"
      	}
      	return e
      }

      func LogLevel() hlog.Level {
      	level := GetConf().Hertz.LogLevel
      	switch level {
      	case "trace":
      		return hlog.LevelTrace
      	case "debug":
      		return hlog.LevelDebug
      	case "info":
      		return hlog.LevelInfo
      	case "notice":
      		return hlog.LevelNotice
      	case "warn":
      		return hlog.LevelWarn
      	case "error":
      		return hlog.LevelError
      	case "fatal":
      		return hlog.LevelFatal
      	default:
      		return hlog.LevelInfo
      	}
      }


  - path: conf/conf.dev.yaml
    delims:
      - ""
      - ""
    body: |-
      hertz:
        port: 8888
        enable_pprof: true
        enable_gzip: true
        enable_access_log: true
        log_level: info
        log_file_name: "log/hertz.log"
        log_max_size: 10
        log_max_age: 3
        log_max_backups: 50

      mysql:
        username: gorm
        password: gorm
        host: 127.0.0.1
        port: 3306

      redis:
        host: 127.0.0.1
        port: 6379
        password: ""

  - path: conf/conf.production.yaml
    delims:
      - ""
      - ""
    body: |-
      hertz:
        port: 8888
        enable_pprof: true
        enable_gzip: true
        enable_access_log: true
        log_level: info
        log_file_name: "log/hertz.log"
        log_max_size: 10
        log_max_age: 3
        log_max_backups: 50

      mysql:
        username: gorm
        password: gorm
        host: 127.0.0.1
        port: 3306

      redis:
        host: 127.0.0.1
        port: 6379
        password: ""

  - path: conf/conf.test.yaml
    delims:
      - ""
      - ""
    body: |-
      hertz:
        port: 8888
        enable_pprof: true
        enable_gzip: true
        enable_access_log: true
        log_level: info
        log_file_name: "log/hertz.log"
        log_max_size: 10
        log_max_age: 3
        log_max_backups: 50

      mysql:
        username: gorm
        password: gorm
        host: 127.0.0.1
        port: 3306

      redis:
        host: 127.0.0.1
        port: 6379
        password: ""


  - path: docs/docs.go
    delims:
      - ""
      - ""
    body: |-
      // Package docs Code generated by swaggo/swag. DO NOT EDIT
      package docs

      import "github.com/swaggo/swag"

      const docTemplate = `{
          "schemes": {{ marshal .Schemes }},
          "swagger": "2.0",
          "info": {
              "description": "{{escape .Description}}",
              "title": "{{.Title}}",
              "contact": {},
              "version": "{{.Version}}"
          },
          "host": "{{.Host}}",
          "basePath": "{{.BasePath}}",
          "paths": {
              "/hello": {
                  "get": {
                      "responses": {}
                  }
              }
          }
      }`

      // SwaggerInfo holds exported Swagger Info so clients can modify it
      var SwaggerInfo = &swag.Spec{
        Version:          "",
        Host:             "",
        BasePath:         "",
        Schemes:          []string{},
        Title:            "",
        Description:      "",
        InfoInstanceName: "swagger",
        SwaggerTemplate:  docTemplate,
        LeftDelim:        "{{",
        RightDelim:       "}}",
      }

      func init() {
        swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
      }



  - path: docs/swagger.json
    delims:
      - ""
      - ""
    body: |-
      {
          "swagger": "2.0",
          "info": {
              "contact": {}
          },
          "paths": {
              "/hello": {
                  "get": {
                      "responses": {}
                  }
              }
          }
      }



  - path: docs/swagger.yaml
    delims:
      - ""
      - ""
    body: |-
      info:
        contact: {}
      paths:
        /hello:
          get:
            responses: {}
      swagger: "2.0"



  - path: internal/dal/init.go
    delims:
      - ""
      - ""
    body: |-
      package dal

      import (
      	"{{.GoModule}}/internal/dal/mysql"
      	"{{.GoModule}}/internal/dal/redis"
      )

      func Init() {
      	redis.Init()
      	mysql.Init()
      }



  - path: internal/dal/mysql/init.go
    delims:
      - ""
      - ""
    body: |-
      package mysql

      import (
      	"fmt"
      	"{{.GoModule}}/conf"

      	"gorm.io/driver/mysql"
      	"gorm.io/gorm"
      	"gorm.io/gorm/logger"
      )

      var DB  *gorm.DB

      func Init() {
      	var err error
      	mysqlConf := conf.GetConf().MySQL
      	dsn := fmt.Sprintf("%s:%s@tcp(%s:%d)/%s?charset=utf8mb4&parseTime=True&loc=Local", mysqlConf.Username, mysqlConf.Password, mysqlConf.Host, mysqlConf.Port, mysqlConf.DB)
      	DB, err = gorm.Open(mysql.Open(dsn), &gorm.Config{
      		SkipDefaultTransaction: true,
      		PrepareStmt:            true,
      		Logger:                 logger.Default.LogMode(logger.Info),
        })
      	if err != nil {
      		panic(err)
      	}
      }


  - path: internal/dal/redis/init.go
    delims:
      - ""
      - ""
    body: |-
      package redis

      import (
      	"context"

      	"github.com/go-redis/redis/v8"
      	"{{.GoModule}}/conf"
      )

      var RedisClient *redis.Client

      func Init() {
        redisConf := conf.GetConf().Redis
        address := redisConf.Host + redisConf.Port
      	RedisClient = redis.NewClient(&redis.Options{
      		Addr:     address,
      		Password: redisConf.Password,
      	})
      	if err := RedisClient.Ping(context.Background()).Err(); err != nil {
      		panic(err)
      	}
      }

  - path: internal/handler/ping.go
    delims:
      - "{{"
      - "}}"
    body: |-
      package handler

      import (
      	"context"

        "github.com/cloudwego/hertz/pkg/app"
        "github.com/cloudwego/hertz/pkg/common/utils"
        "github.com/cloudwego/hertz/pkg/protocol/consts"
      )

      // Ping .
      func Ping(ctx context.Context, c *app.RequestContext) {
        c.JSON(consts.StatusOK, utils.H{
          "message": "pong",
        })
      }

  - path: internal/middleware/recovery.go
    delims:
      - "{{"
      - "}}"
    body: |-
      package middleware

      import (
      	"github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
      	"github.com/cloudwego/hertz/pkg/app/server"
      )

      func registerRecovery(h *server.Hertz) {
      	h.Use(recovery.Recovery())
      }

  - path: internal/middleware/register.go
    delims:
      - "{{"
      - "}}"
    body: |-
      package middleware

      import (
      	"github.com/cloudwego/hertz/pkg/app/server"
      )

      func Register(h *server.Hertz) {
      	registerRecovery(h)
      }



  - path: internal/router/register.go
    delims:
      - ""
      - ""
    body: |-
      // Code generated by hertz generator. DO NOT EDIT.

      package router

      import (
      	"github.com/cloudwego/hertz/pkg/app/server"
      )

      // GeneratedRegister registers routers generated by IDL.
      func GeneratedRegister(r *server.Hertz){
      	//INSERT_POINT: DO NOT DELETE THIS LINE!
      }



  - path: internal/router/router_gen.go
    delims:
      - ""
      - ""
    body: |-
      // Code generated by hertz generator. DO NOT EDIT.

      package router

      import (
      	"github.com/cloudwego/hertz/pkg/app/server"
      )

      // register registers all routers.
      func Register(r *server.Hertz) {
      	GeneratedRegister(r)

      	customizedRegister(r)
      }



  - path: internal/router/router.go
    delims:
      - ""
      - ""
    body: |-
      // Code generated by hertz generator. DO NOT EDIT.

      package router

      import (
      	handler "hertz_demo/internal/handler"

      	"github.com/cloudwego/hertz/pkg/app/server"
      )

      // customizeRegister registers customize routers.
      func customizedRegister(r *server.Hertz) {
      	r.GET("/ping", handler.Ping)

      	// your code ...
      	registerSwagger(r)
      }



  - path: internal/router/swagger.go
    delims:
      - ""
      - ""
    body: |-
      // Code generated by hertz generator. DO NOT EDIT.

      package router

      import (
      	_ "hertz_demo/docs"

      	"github.com/cloudwego/hertz/pkg/app/server"
      	"github.com/hertz-contrib/swagger"
      	swaggerFiles "github.com/swaggo/files"
      )

      func registerSwagger(h *server.Hertz) {
      	h.GET("/swagger/*any", swagger.WrapHandler(swaggerFiles.Handler, swagger.URL("/swagger/doc.json")))
      }


  - path: internal/utils/resp.go
    delims:
      - "{{"
      - "}}"
    body: |-
      package utils

      import (
      	"context"

      	"github.com/cloudwego/hertz/pkg/app"
      )

      // SendErrResponse  pack error response
      func SendErrResponse(ctx context.Context, c *app.RequestContext, code int, err error) {
      	// todo edit custom code
      	c.String(code, err.Error())
      }

      // SendSuccessResponse  pack success response
      func SendSuccessResponse(ctx context.Context, c *app.RequestContext, code int, data interface{}) {
      	// todo edit custom code
      	c.JSON(code, data)
      }


  - path: script/bootstrap.sh
    delims:
      - "{{"
      - "}}"
    body: |-
      #!/bin/bash
      CURDIR=$(cd $(dirname $0); pwd)
      BinaryName={{.ServiceName}}
      echo "$CURDIR/bin/${BinaryName}"
      exec $CURDIR/bin/${BinaryName}


  - path: .gitignore
    delims:
      - ""
      - ""
    body: |-
      *.o
      *.a
      *.so
      _obj
      _test
      *.[568vq]
      [568vq].out
      *.cgo1.go
      *.cgo2.c
      _cgo_defun.c
      _cgo_gotypes.go
      _cgo_export.*
      _testmain.go
      *.exe
      *.exe~
      *.test
      *.prof
      *.rar
      *.zip
      *.gz
      *.psd
      *.bmd
      *.cfg
      *.pptx
      *.log
      *nohup.out
      *settings.pyc
      *.sublime-project
      *.sublime-workspace
      !.gitkeep
      .DS_Store
      /.idea
      /.vscode
      /output
      *.local.yml
      /gen


  - path: .hz
    delims:
      - "{{"
      - "}}"
    body: |-
      // Code generated by hz. DO NOT EDIT.

      hz version: {{.hzVersion}},
      handlerDir: "internal/handler"
      modelDir: "gen/model"
      routerDir: "internal/router"



  - path: build.sh
    delims:
      - "{{"
      - "}}"
    body: |-
      #!/bin/bash
      RUN_NAME={{.ServiceName}}
      mkdir -p output/bin output/conf
      cp script/bootstrap.sh output 2>/dev/null
      chmod +x output/bootstrap.sh
      cp -r conf/* output/conf
      go build -o output/bin/${RUN_NAME}

  - path: go.mod
    delims:
      - '{{'
      - '}}'
    body: |-
      module {{.GoModule}}
      {{- if .UseApacheThrift}}
      replace github.com/apache/thrift => github.com/apache/thrift v0.13.0
      {{- end}}